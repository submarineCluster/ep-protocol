// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: experiment.proto

package proto_ep_info_center

import (
	fmt "fmt"
	_ "git.code.oa.com/trpcprotocol/tab/common"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ExperimentService service

func NewExperimentServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ExperimentService service

type ExperimentService interface {
	Create(ctx context.Context, in *CreateExperimentRequest, opts ...client.CallOption) (*CreateExperimentResponse, error)
	Update(ctx context.Context, in *UpdateExperimentRequest, opts ...client.CallOption) (*UpdateExperimentResponse, error)
	Get(ctx context.Context, in *GetExperimentRequest, opts ...client.CallOption) (*GetExperimentResponse, error)
	List(ctx context.Context, in *ListExperimentRequest, opts ...client.CallOption) (*ListExperimentResponse, error)
	Del(ctx context.Context, in *DelExperimentRequest, opts ...client.CallOption) (*DelExperimentResponse, error)
}

type experimentService struct {
	c    client.Client
	name string
}

func NewExperimentService(name string, c client.Client) ExperimentService {
	return &experimentService{
		c:    c,
		name: name,
	}
}

func (c *experimentService) Create(ctx context.Context, in *CreateExperimentRequest, opts ...client.CallOption) (*CreateExperimentResponse, error) {
	req := c.c.NewRequest(c.name, "ExperimentService.Create", in)
	out := new(CreateExperimentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentService) Update(ctx context.Context, in *UpdateExperimentRequest, opts ...client.CallOption) (*UpdateExperimentResponse, error) {
	req := c.c.NewRequest(c.name, "ExperimentService.Update", in)
	out := new(UpdateExperimentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentService) Get(ctx context.Context, in *GetExperimentRequest, opts ...client.CallOption) (*GetExperimentResponse, error) {
	req := c.c.NewRequest(c.name, "ExperimentService.Get", in)
	out := new(GetExperimentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentService) List(ctx context.Context, in *ListExperimentRequest, opts ...client.CallOption) (*ListExperimentResponse, error) {
	req := c.c.NewRequest(c.name, "ExperimentService.List", in)
	out := new(ListExperimentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experimentService) Del(ctx context.Context, in *DelExperimentRequest, opts ...client.CallOption) (*DelExperimentResponse, error) {
	req := c.c.NewRequest(c.name, "ExperimentService.Del", in)
	out := new(DelExperimentResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExperimentService service

type ExperimentServiceHandler interface {
	Create(context.Context, *CreateExperimentRequest, *CreateExperimentResponse) error
	Update(context.Context, *UpdateExperimentRequest, *UpdateExperimentResponse) error
	Get(context.Context, *GetExperimentRequest, *GetExperimentResponse) error
	List(context.Context, *ListExperimentRequest, *ListExperimentResponse) error
	Del(context.Context, *DelExperimentRequest, *DelExperimentResponse) error
}

func RegisterExperimentServiceHandler(s server.Server, hdlr ExperimentServiceHandler, opts ...server.HandlerOption) error {
	type experimentService interface {
		Create(ctx context.Context, in *CreateExperimentRequest, out *CreateExperimentResponse) error
		Update(ctx context.Context, in *UpdateExperimentRequest, out *UpdateExperimentResponse) error
		Get(ctx context.Context, in *GetExperimentRequest, out *GetExperimentResponse) error
		List(ctx context.Context, in *ListExperimentRequest, out *ListExperimentResponse) error
		Del(ctx context.Context, in *DelExperimentRequest, out *DelExperimentResponse) error
	}
	type ExperimentService struct {
		experimentService
	}
	h := &experimentServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExperimentService{h}, opts...))
}

type experimentServiceHandler struct {
	ExperimentServiceHandler
}

func (h *experimentServiceHandler) Create(ctx context.Context, in *CreateExperimentRequest, out *CreateExperimentResponse) error {
	return h.ExperimentServiceHandler.Create(ctx, in, out)
}

func (h *experimentServiceHandler) Update(ctx context.Context, in *UpdateExperimentRequest, out *UpdateExperimentResponse) error {
	return h.ExperimentServiceHandler.Update(ctx, in, out)
}

func (h *experimentServiceHandler) Get(ctx context.Context, in *GetExperimentRequest, out *GetExperimentResponse) error {
	return h.ExperimentServiceHandler.Get(ctx, in, out)
}

func (h *experimentServiceHandler) List(ctx context.Context, in *ListExperimentRequest, out *ListExperimentResponse) error {
	return h.ExperimentServiceHandler.List(ctx, in, out)
}

func (h *experimentServiceHandler) Del(ctx context.Context, in *DelExperimentRequest, out *DelExperimentResponse) error {
	return h.ExperimentServiceHandler.Del(ctx, in, out)
}
